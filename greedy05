#동빈나
#p.312 곱하기 혹은 더하기

num = input()
num_list = []
for i in range(len(num)) :
  num_list.append(int(num[i]))
#print(num_list)

#만들어질 수 있는 가장 큰수, 
#0이나 1이면 더한다

sum = 0 
for i in range(len(num)) :
  if num_list[i] == 0 or num_list[i] == 1 or sum == 0:
    sum += num_list[i] #IndexError: list index out of range
    print('더하기',sum)
  else : 
    sum *= num_list[i] 
    print('곱하기',sum)

#모범답안
data = input()
result = int(data[0])
for i in range(1, len(data)):
  num = int(data[i])
  if num <= 1 or result <= 1:
    result += num
  else
    result *= num
print(result) 


#나의 풀이(틀림)

num = input()
num_list = []
for i in range(len(num)) :
  num_list.append(int(num[i]))
#print(num_list)

#만들어질 수 있는 가장 큰수, 
#0이나 1이면 더한다
sum = 0 
for i in range() :
  if num_list[i] == '0' or '1' :
    sum = num_list[i]+num_list[i+1] #IndexError: list index out of range
  else : 
    sum = num_list[i] * num_list[i+1]

print(sum)


#나의풀이 2(맞음)
num = input()
num_list = []
for i in range(len(num)) :
  num_list.append(int(num[i]))
#print(num_list)

#만들어질 수 있는 가장 큰수, 
#0이나 1이면 더한다

sum = 0 
for i in range(len(num)) :
  if num_list[i] == 0 or num_list[i] == 1: 
    sum += num_list[i] #IndexError: list index out of range
    print('더하기',sum)
  else : 
    if sum == 0:
      sum = 1
    sum *= num_list[i] 
    print('곱하기',sum)


#chatgpt
The code you provided seems to be trying to calculate the maximum possible value based on the given num input. However, there are a few issues that need to be addressed:

1.The second loop (for i in range()) is missing the range specification, causing the IndexError when trying to access num_list[i+1]. To fix this, you need to loop until len(num_list) - 1.

2.The condition if num_list[i] == 0 or 1 is incorrect. It will always evaluate to True because 1 is considered as True in Python. Instead, you should check whether num_list[i] is either 0 or 1.

3.When calculating the maximum value, you are adding the two adjacent elements if num_list[i] is 0 or 1, and multiplying them otherwise. However, this approach is not correct as it won't necessarily yield the maximum value.

To find the maximum possible value, you should consider the following approach:

Always multiply the numbers unless they are 0 or 1.
If you encounter 0 or 1, add it to the previous number (if it exists) instead of multiplying them.
